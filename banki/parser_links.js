const fs = require("fs-extra");
const puppeteer = require("puppeteer");

const START_URL = "https://www.banki.ru/services/responses/bank/gazprombank/?is_countable=on";

// üîß –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const SAVE_EVERY_ITEMS = 200;          // –∞–≤—Ç–æ—Å–µ–π–≤ –∫–∞–∂–¥—ã–µ N –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫
const SAVE_EVERY_MS = 30_000;          // –∞–≤—Ç–æ—Å–µ–π–≤ —Ä–∞–∑ –≤ N –º—Å
const CHECKPOINT_FILE = "links.json";

const CLICK_MORE_TRIES = 5000;
const WAIT_AFTER_CLICK_MS = 2500;
const SCROLL_AFTER_CLICK_MS = 1500;

// üîß —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
const DATE_FROM = new Date("2024-01-01");
const DATE_TO = new Date("2025-05-31");

const EARLY_STOP_ON_OLD = true;
const OLD_BATCH_STREAK_TO_STOP = 3;

const delay = (ms) => new Promise((r) => setTimeout(r, ms));
const parseDateIso = (str) => {
  const m = (str || "").match(/(\d{2})\.(\d{2})\.(\d{4})/);
  return m ? `${m[3]}-${m[2]}-${m[1]}` : null;
};
const inRange = (iso) => {
  if (!iso) return true;
  const d = new Date(iso);
  return d >= DATE_FROM && d <= DATE_TO;
};

(async () => {
  console.log("üöÄ parser_links.js ‚Äî —Å–±–æ—Ä —Å—Å—ã–ª–æ–∫ c —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –¥–∞—Ç–∞–º –Ω–∞ –ª–∏—Å—Ç–∏–Ω–≥–µ");

  // 1) –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç
  let items = [];
  if (await fs.pathExists(CHECKPOINT_FILE)) {
    try {
      items = await fs.readJson(CHECKPOINT_FILE);
      console.log(`üîÑ –ù–∞–π–¥–µ–Ω–æ –≤ —á–µ–∫–ø–æ–∏–Ω—Ç–µ: ${items.length} –∑–∞–ø–∏—Å–µ–π`);
    } catch {
      console.log("‚ö†Ô∏è –ß–µ–∫–ø–æ–∏–Ω—Ç –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äî –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ");
      items = [];
    }
  }
  const ids = new Set(items.map((x) => x.id));

  // –∞–≤—Ç–æ—Å–µ–π–≤
  let lastSavedAt = Date.now();
  let addedSinceLastSave = 0;
  const saveNow = async (reason = "manual") => {
    try {
      await fs.writeJson(CHECKPOINT_FILE, items, { spaces: 2 });
      lastSavedAt = Date.now();
      addedSinceLastSave = 0;
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ (${reason}): –≤—Å–µ–≥–æ ${items.length}`);
    } catch (e) {
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", e.message);
    }
  };

  // —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const emergencySave = async (msg) => {
    console.log(`\nüõë ${msg} ‚Äî —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
    await saveNow("emergency");
    process.exit(1);
  };
  process.on("SIGINT", async () => { await emergencySave("SIGINT"); });
  process.on("uncaughtException", async (e) => { console.error("üí• uncaughtException:", e); await emergencySave("uncaughtException"); });
  process.on("unhandledRejection", async (e) => { console.error("üí• unhandledRejection:", e); await emergencySave("unhandledRejection"); });

  // 2) –±—Ä–∞—É–∑–µ—Ä
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });
  const page = await browser.newPage();
  await page.setUserAgent(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
  );

  console.log("üåê –û—Ç–∫—Ä—ã–≤–∞—é:", START_URL);
  await page.goto(START_URL, { waitUntil: "domcontentloaded", timeout: 0 });
  await page.waitForSelector("[data-test='responses__response']", { timeout: 60_000 });
  console.log("‚úÖ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–≥—Ä—É–∂–µ–Ω–∞");

  let tries = 0;
  let oldBatchStreak = 0;

  while (tries < CLICK_MORE_TRIES) {
    tries++;

    const batch = await page.$$eval("[data-test='responses__response']", (nodes) =>
      nodes.map((n) => {
        const a = n.querySelector("h3 a, [data-test='link-text']");
        const href = a?.getAttribute("href") || "";
        const link = href ? (href.startsWith("http") ? href : `https://www.banki.ru${href}`) : null;
        const idMatch = link?.match(/response\/(\d+)/);
        const id = idMatch ? Number(idMatch[1]) : null;
        const title =
          n.querySelector("h3")?.textContent?.trim() ||
          n.querySelector("[data-test='link-text']")?.textContent?.trim() ||
          null;
        const dateRaw = n.querySelector(".Responsesstyled__StyledItemSmallText-sc-150koqm-4")?.textContent?.trim() || null;
        return { id, link, title, dateRaw };
      })
    );

    let added = 0, skipped = 0, dups = 0;
    let batchAllOld = true;

    for (const b of batch) {
      if (!b?.id || !b?.link) continue;
      const dateIso = parseDateIso(b.dateRaw);
      if (dateIso && new Date(dateIso) >= DATE_FROM) batchAllOld = false;
      if (!inRange(dateIso)) { skipped++; continue; }
      if (ids.has(b.id)) { dups++; continue; }

      ids.add(b.id);
      items.push({ id: b.id, link: b.link, title: b.title || null, date: dateIso });
      added++;
      addedSinceLastSave++;
    }

    console.log(
      `üì¶ –ë–∞—Ç—á#${tries}: –∫–∞—Ä—Ç–æ—á–µ–∫=${batch.length} | +${added} –Ω–æ–≤—ã—Ö | üîÅ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ${dups} | ‚è≠Ô∏è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ ${skipped} | –≤—Å–µ–≥–æ=${items.length}`
    );

    // —Ä–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    if (EARLY_STOP_ON_OLD) {
      if (batch.length > 0 && batchAllOld && added === 0) {
        oldBatchStreak++;
        console.log(`‚è≥ –ü–æ—à–ª–∏ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –¥–∞—Ç—ã (—Å—Ç—Ä–∏–∫=${oldBatchStreak}/${OLD_BATCH_STREAK_TO_STOP})`);
      } else {
        oldBatchStreak = 0;
      }
      if (oldBatchStreak >= OLD_BATCH_STREAK_TO_STOP) {
        console.log("üõë –î–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—ã–µ –¥–∞—Ç—ã ‚Äî —Å—Ç–æ–ø.");
        break;
      }
    }

    // –∞–≤—Ç–æ—Å–µ–π–≤—ã
    if (addedSinceLastSave >= SAVE_EVERY_ITEMS) await saveNow(`items>=${SAVE_EVERY_ITEMS}`);
    if (Date.now() - lastSavedAt >= SAVE_EVERY_MS) await saveNow(`timer>=${SAVE_EVERY_MS}ms`);

    // –∫–ª–∏–∫
    const moreBtn = await page.$("[data-test='responses__more-btn']");
    if (!moreBtn) {
      console.log("‚ùå –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚Äî —Å—Ç–æ–ø.");
      break;
    }
    console.log(`üëâ [${tries}] –ö–ª–∏–∫–∞—é ¬´–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë¬ª‚Ä¶`);
    await moreBtn.click();
    await delay(WAIT_AFTER_CLICK_MS);
    await page.evaluate(() => window.scrollTo({ top: document.body.scrollHeight, behavior: "instant" }));
    await delay(SCROLL_AFTER_CLICK_MS);
  }

  await saveNow("final");
  console.log("üéâ –ì–æ—Ç–æ–≤–æ. –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ:", items.length);

  const inRangeCount = items.filter((x) => inRange(x.date)).length;
  console.log(`üìä –ò—Ç–æ–≥: –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ=${inRangeCount}, –≤—Å–µ–≥–æ=${items.length}`);
  await browser.close();
})();