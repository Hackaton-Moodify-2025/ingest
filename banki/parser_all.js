const fs = require("fs-extra");
const puppeteer = require("puppeteer");

const START_URL =
  "https://www.banki.ru/services/responses/bank/gazprombank/?is_countable=on";

// === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
const DATE_FROM = new Date("2024-01-01");
const DATE_TO = new Date("2025-05-31");
const MAX_REVIEWS = 5000;           // –æ–±—â–∏–π –ª–∏–º–∏—Ç
const CLICK_MORE_TRIES = 1000;      // –º–∞–∫—Å–∏–º—É–º –∫–ª–∏–∫–æ–≤ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
const SAVE_EVERY = 50;              // –∞–≤—Ç–æ—Å–µ–π–≤ –∫–∞–∂–¥—ã–µ N –æ—Ç–∑—ã–≤–æ–≤
const PAGE_TIMEOUT = 60000;
const CHECKPOINT_FILE = "checkpoint.json";
const OUTPUT_FILE = "reviews_full.json";

const delay = (ms) => new Promise((r) => setTimeout(r, ms));

function parseDate(str) {
  const m = str.match(/(\d{2})\.(\d{2})\.(\d{4})/);
  if (m) return `${m[3]}-${m[2]}-${m[1]}`;
  return null;
}

(async () => {
  console.log("üöÄ –ó–∞–ø—É—Å–∫ Puppeteer...");
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });
  const page = await browser.newPage();

  await page.setUserAgent(
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
  );

  console.log("üåê –û—Ç–∫—Ä—ã–≤–∞—é:", START_URL);
  await page.goto(START_URL, { waitUntil: "domcontentloaded", timeout: 0 });

  console.log("‚è≥ –ñ–¥—É –ø–æ—è–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤...");
  await page.waitForSelector("[data-test='responses__response']", { timeout: PAGE_TIMEOUT });
  console.log("‚úÖ –û—Ç–∑—ã–≤—ã –Ω–∞–π–¥–µ–Ω—ã!");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç
  let checkpoint = { done: [] };
  if (await fs.pathExists(CHECKPOINT_FILE)) {
    checkpoint = await fs.readJson(CHECKPOINT_FILE);
    console.log(`üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω —á–µ–∫–ø–æ–∏–Ω—Ç, —É–∂–µ —Å–æ–±—Ä–∞–Ω–æ: ${checkpoint.done.length}`);
  }

  const results = checkpoint.done || [];
  let processedTotal = results.length;
  let addedTotal = results.length;

  // –ñ–º—ë–º "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
  let tries = 0;
  while (true) {
    const count = await page.$$eval("[data-test='responses__response']", els => els.length);
    console.log(`üìä –°–µ–π—á–∞—Å –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${count}`);

    if (count >= MAX_REVIEWS) break;
    if (tries >= CLICK_MORE_TRIES) {
      console.log("‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –Ω–∞–∂–∞—Ç–∏–π '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'.");
      break;
    }

    const moreBtn = await page.$("[data-test='responses__more-btn']");
    if (!moreBtn) {
      console.log("‚ÑπÔ∏è –ö–Ω–æ–ø–∫–∞ '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
      break;
    }

    tries++;
    console.log(`üëâ [${tries}] –ö–ª–∏–∫–∞—é '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë'...`);
    await moreBtn.click();
    await delay(2500);
    await page.evaluate(() =>
      window.scrollTo({ top: document.body.scrollHeight, behavior: "instant" })
    );
    await delay(1500);
  }

  console.log("üì¶ –°–æ–±–∏—Ä–∞—é —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ —Å –ª–∏—Å—Ç–∏–Ω–≥–∞...");
  const list = await page.$$eval("[data-test='responses__response']", (nodes) =>
    nodes.map((n) => {
      const a = n.querySelector("h3 a, [data-test='link-text']");
      const href = a?.getAttribute("href") || "";
      const link = href.startsWith("http") ? href : href ? `https://www.banki.ru${href}` : null;

      const idMatch = link?.match(/response\/(\d+)\/?/);
      const id = idMatch ? Number(idMatch[1]) : null;

      const title =
        n.querySelector("h3")?.textContent?.trim() ||
        n.querySelector("[data-test='link-text']")?.textContent?.trim() ||
        null;

      return { id, link, title, date: null, text: null, rating: null };
    })
  );

  const reviews = list.filter((r) => r.link && r.id).slice(0, MAX_REVIEWS);
  console.log(`üîó –û—Ç–æ–±—Ä–∞–Ω–æ —Å—Å—ã–ª–æ–∫ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${reviews.length}`);

  // –ì–ª—É–±–æ–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥
  let done = 0;
  for (const r of reviews) {
    if (results.find((x) => x.id === r.id)) continue; // —É–∂–µ —Å–æ–±—Ä–∞–Ω–æ –≤ —á–µ–∫–ø–æ–∏–Ω—Ç–µ
    done++;
    processedTotal++;

    console.log(`üìñ [${done}/${reviews.length}] –û—Ç–∫—Ä—ã–≤–∞—é ${r.link}`);

    const sub = await browser.newPage();
    try {
      await sub.setUserAgent(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
      );
      await sub.goto(r.link, { waitUntil: "domcontentloaded", timeout: 0 });
      await sub.waitForSelector("h1", { timeout: 10000 }).catch(() => null);

      let got = { title: null, text: null, rating: null, dateIso: null };

      // JSON-LD
      const jsonLd = await sub
        .$eval('script[type="application/ld+json"]', (el) => el.textContent)
        .catch(() => null);

      if (jsonLd) {
        try {
          const data = JSON.parse(jsonLd);
          const reviewBodyHtml =
            data.reviewBody ||
            (data.author && (data.author.reviewBody || data.author.description)) ||
            data.description ||
            null;

          const fullText = await sub.evaluate((html) => {
            if (!html) return null;
            const d = document.createElement("div");
            d.innerHTML = html;
            return d.innerText.replace(/\s+/g, " ").trim();
          }, reviewBodyHtml);

          const rating =
            (data.reviewRating &&
              (data.reviewRating.ratingValue ||
                data.reviewRating.value ||
                data.reviewRating)) ||
            null;

          const title = data.name || null;

          got.text = fullText || null;
          got.rating = rating ? String(rating) : null;
          got.title = title || null;
        } catch {}
      }

      // –§–æ–ª–±—ç–∫–∏
      if (!got.text) {
        got.text = await sub
          .evaluate(() => {
            const sels = [
              "[data-test='response-body']",
              ".responses__text",
              "article",
              ".page-container__body [itemprop='reviewBody']",
            ];
            for (const sel of sels) {
              const el = document.querySelector(sel);
              if (el) return el.innerText.replace(/\s+/g, " ").trim();
            }
            return null;
          })
          .catch(() => null);
      }

      if (!got.title) {
        got.title = await sub.$eval("h1", (h) => h.textContent.trim()).catch(() => r.title || null);
      }

      if (!got.rating) {
        got.rating = await sub
          .evaluate(() => {
            const gradeDigit = document.querySelector("[data-test='grade']")?.textContent?.trim();
            if (gradeDigit && /^\d$/.test(gradeDigit)) return gradeDigit;
            const divWithValue = Array.from(document.querySelectorAll("div[value]")).find((d) =>
              /^\d$/.test(d.getAttribute("value") || "")
            );
            return divWithValue?.getAttribute("value") || null;
          })
          .catch(() => null);
      }

      // –î–∞—Ç–∞
      let dateIso = null;
      const dateRaw = await sub.$eval("time", (t) => t.textContent.trim()).catch(() => null);
      if (dateRaw) {
        const d = parseDate(dateRaw);
        if (d) dateIso = d;
      }
      if (!dateIso && got.text) {
        const m = got.text.match(/(\d{2})\.(\d{2})\.(\d{4})/);
        if (m) dateIso = `${m[3]}-${m[2]}-${m[1]}`;
      }

      r.title = got.title || r.title || null;
      r.text = got.text || null;
      r.rating = got.rating || null;
      r.date = dateIso;

      // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º
      if (r.date) {
        const dObj = new Date(r.date);
        if (dObj < DATE_FROM || dObj > DATE_TO) {
          console.log(`‚è≠Ô∏è –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: ${r.date}`);
          await sub.close();
          continue;
        }
      }

      results.push({
        id: r.id,
        link: r.link,
        date: r.date || null,
        title: r.title || null,
        text: r.text || null,
        rating: r.rating || null,
      });
      addedTotal++;

      console.log(
        `   ‚úÖ ok | id=${r.id} | rating=${r.rating || "-"} | date=${r.date || "-"} | title="${(r.title || "").slice(0, 60)}"`
      );

      if (results.length % SAVE_EVERY === 0) {
        await fs.writeJson(CHECKPOINT_FILE, { done: results }, { spaces: 2 });
        console.log(`üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Å–µ–π–≤ (${results.length} –æ—Ç–∑—ã–≤–æ–≤)`);
      }
    } catch (e) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ ${r.link}: ${e.message}`);
    } finally {
      await sub.close();
      await delay(800);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  await fs.writeJson(CHECKPOINT_FILE, { done: results }, { spaces: 2 });
  await fs.writeJson(OUTPUT_FILE, results, { spaces: 2 });

  console.log(
    `üéâ –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ: ${processedTotal}, —Å–æ–±—Ä–∞–Ω–æ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É: ${addedTotal}`
  );
  await browser.close();
})();