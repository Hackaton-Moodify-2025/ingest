const { Builder, By, until } = require('selenium-webdriver');
const chrome = require('selenium-webdriver/chrome');
const fs = require('fs').promises;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è graceful shutdown
let driver = null;
let allReviews = [];
let isShuttingDown = false;
let processedCount = 0;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Chrome
const chromeOptions = new chrome.Options();
// –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è headless —Ä–µ–∂–∏–º–∞
// chromeOptions.addArguments('--headless');
chromeOptions.addArguments('--no-sandbox');
chromeOptions.addArguments('--disable-dev-shm-usage');
chromeOptions.addArguments('--window-size=1920,1080');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
chromeOptions.addArguments('--disable-web-security');
chromeOptions.addArguments('--disable-features=VizDisplayCompositor');
chromeOptions.addArguments('--disable-background-networking');
chromeOptions.addArguments('--disable-background-timer-throttling');
chromeOptions.addArguments('--disable-renderer-backgrounding');
chromeOptions.addArguments('--disable-backgrounding-occluded-windows');
chromeOptions.addArguments('--disable-client-side-phishing-detection');
chromeOptions.addArguments('--disable-sync');
chromeOptions.addArguments('--disable-default-apps');
chromeOptions.addArguments('--disable-extensions');
chromeOptions.addArguments('--disable-plugins');
chromeOptions.addArguments('--disable-popup-blocking');
chromeOptions.addArguments('--disable-translate');
chromeOptions.addArguments('--no-first-run');
chromeOptions.addArguments('--no-default-browser-check');
chromeOptions.addArguments('--disable-infobars');
chromeOptions.addArguments('--disable-notifications');
chromeOptions.addArguments('--disable-save-password-bubble');
chromeOptions.addArguments('--disable-blink-features=AutomationControlled');
chromeOptions.addArguments('--ignore-certificate-errors');
chromeOptions.addArguments('--ignore-ssl-errors');
chromeOptions.addArguments('--allow-running-insecure-content');

// –§—É–Ω–∫—Ü–∏—è graceful shutdown
async function gracefulShutdown(signal) {
    if (isShuttingDown) {
        console.log('\n‚è≥ –£–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã...');
        return;
    }

    isShuttingDown = true;
    console.log(`\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown...`);

    try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if (allReviews.length > 0) {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...');
            await saveReviewsToFile(allReviews, 'otzovik_detailed_reviews_emergency.json');
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: ${allReviews.length}`);
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
        if (driver) {
            console.log('üîö –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...');
            await driver.quit();
            console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
        }

        console.log('üèÅ Graceful shutdown –∑–∞–≤–µ—Ä—à–µ–Ω');
        process.exit(0);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ graceful shutdown:', error.message);
        process.exit(1);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
process.on('SIGINT', () => gracefulShutdown('SIGINT'));   // Ctrl+C
process.on('SIGTERM', () => gracefulShutdown('SIGTERM')); // Termination signal
process.on('SIGHUP', () => gracefulShutdown('SIGHUP'));   // Hang up signal

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤ –≤ JSON —Ñ–∞–π–ª
async function saveReviewsToFile(reviews, filename = 'otzovik_detailed_reviews.json') {
    try {
        await fs.writeFile(filename, JSON.stringify(reviews, null, 2), 'utf8');
        console.log(`üíæ –û—Ç–∑—ã–≤—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
        console.log(`üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: ${reviews.length}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ ID –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function findLastProcessedId() {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º emergency —Ñ–∞–π–ª
    const emergencyFile = 'otzovik_detailed_reviews_emergency.json';
    try {
        const data = await fs.readFile(emergencyFile, 'utf8');
        const reviews = JSON.parse(data);
        
        if (reviews.length > 0) {
            const lastId = reviews[reviews.length - 1].id;
            console.log(`üîÑ –ù–∞–π–¥–µ–Ω emergency —Ñ–∞–π–ª ${emergencyFile} —Å ${reviews.length} –æ—Ç–∑—ã–≤–∞–º–∏. –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastId}`);
            return { lastId, existingReviews: reviews, filename: emergencyFile };
        }
    } catch (e) {
        // Emergency —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
        console.log('üìÑ Emergency —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã...');
    }
    
    // –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (pattern: otzovik_detailed_reviews_NUMBER.json)
    // –≥–¥–µ NUMBER –∫—Ä–∞—Ç–Ω–æ 50 (50, 100, 150, 200, ...)
    try {
        const fsSync = require('fs');
        const files = fsSync.readdirSync('.');
        const intermediateFiles = files.filter(file => 
            file.match(/^otzovik_detailed_reviews_\d+\.json$/)
        ).sort((a, b) => {
            const numA = parseInt(a.match(/\d+/)[0]);
            const numB = parseInt(b.match(/\d+/)[0]);
            return numB - numA; // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –ø–µ—Ä–≤—ã–º)
        });
        
        console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${intermediateFiles.length}`);
        if (intermediateFiles.length > 0) {
            console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã: ${intermediateFiles.slice(0, 3).join(', ')}${intermediateFiles.length > 3 ? '...' : ''}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–æ—Ä—è–¥–∫—É (–æ—Ç —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ –∫ –º–µ–Ω—å—à–µ–º—É)
        for (const filename of intermediateFiles) {
            try {
                const data = await fs.readFile(filename, 'utf8');
                const reviews = JSON.parse(data);
                
                if (reviews.length > 0) {
                    const lastId = reviews[reviews.length - 1].id;
                    console.log(`üîÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª ${filename} —Å ${reviews.length} –æ—Ç–∑—ã–≤–∞–º–∏. –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastId}`);
                    return { lastId, existingReviews: reviews, filename };
                }
            } catch (e) {
                console.warn(`‚ö†Ô∏è  –§–∞–π–ª ${filename} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                continue;
            }
        }
    } catch (e) {
        console.warn('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:', e.message);
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const mainFile = 'otzovik_detailed_reviews.json';
    try {
        const data = await fs.readFile(mainFile, 'utf8');
        const reviews = JSON.parse(data);
        
        if (reviews.length > 0) {
            const lastId = reviews[reviews.length - 1].id;
            console.log(`üîÑ –ù–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª ${mainFile} —Å ${reviews.length} –æ—Ç–∑—ã–≤–∞–º–∏. –ü–æ—Å–ª–µ–¥–Ω–∏–π ID: ${lastId}`);
            return { lastId, existingReviews: reviews, filename: mainFile };
        }
    } catch (e) {
        // –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —Ç–æ–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    }
    
    console.log('üÜï –ü—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞');
    return { lastId: null, existingReviews: [], filename: null };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞—á–∏–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ ID
function filterSourceReviewsFromId(sourceReviews, lastProcessedId) {
    if (!lastProcessedId) {
        return sourceReviews;
    }
    
    const lastIndex = sourceReviews.findIndex(review => review.id === lastProcessedId);
    
    if (lastIndex === -1) {
        console.log(`‚ö†Ô∏è  –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π ID ${lastProcessedId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
        return sourceReviews;
    }
    
    const remainingReviews = sourceReviews.slice(lastIndex + 1);
    console.log(`‚û°Ô∏è  –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–∑–∏—Ü–∏–∏ ${lastIndex + 1}, –æ—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${remainingReviews.length} –æ—Ç–∑—ã–≤–æ–≤`);
    
    return remainingReviews;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å ID –∏ —Å—Å—ã–ª–∫–∞–º–∏
async function loadSourceReviews(filename = 'otzovik_reviews_filtered_2024-2025.json') {
    try {
        const data = await fs.readFile(filename, 'utf8');
        const reviews = JSON.parse(data);
        console.log(`üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        return reviews;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', error.message);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
function cleanText(text) {
    if (!text) return null;
    return text.replace(/\s+/g, ' ').trim() || null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ location —Å—Ç—Ä–æ–∫–∏
function extractCity(locationText) {
    if (!locationText) return null;

    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω "–†–æ—Å—Å–∏—è, –ì–æ—Ä–æ–¥" –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ "–ì–æ—Ä–æ–¥"
    const cityMatch = locationText.match(/(?:–†–æ—Å—Å–∏—è,\s*)?(.+?)$/);
    if (cityMatch && cityMatch[1]) {
        return cleanText(cityMatch[1].toUpperCase());
    }

    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞
async function parseDetailedReview(driverInstance, reviewData) {
    try {
        console.log(`   üìÑ –ü–∞—Ä—Å–∏–º –æ—Ç–∑—ã–≤ ${reviewData.id}...`);

        await driverInstance.get(reviewData.link);

        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ—Ç–∑—ã–≤–∞
        let reviewContainer;
        try {
            reviewContainer = await driverInstance.wait(
                until.elementLocated(By.css('.review-contents[itemprop="review"]')),
                15000
            );
        } catch (e) {
            console.warn(`   ‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID ${reviewData.id}`);
            return null;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–∑—ã–≤–∞ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const review = {
            id: reviewData.id,
            link: reviewData.link,
            date: null,
            title: null,
            text: null,
            rating: null,
            status: null,
            product: null,
            city: null
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        try {
            const dateElement = await reviewContainer.findElement(By.css('meta[itemprop="datePublished"]'));
            review.date = await dateElement.getAttribute('content');
        } catch (e) {
            console.warn(`   ‚ö†Ô∏è  –î–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${reviewData.id}`);
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–∑—ã–≤–∞ (—Ç–µ–≥ h1)
        try {
            const titleElement = await reviewContainer.findElement(By.css('h1'));
            const titleText = await titleElement.getText();
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–û—Ç–∑—ã–≤: " –µ—Å–ª–∏ –µ—Å—Ç—å
            review.title = cleanText(titleText.replace(/^–û—Ç–∑—ã–≤:\s*/, ''));
        } catch (e) {
            console.warn(`   ‚ö†Ô∏è  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${reviewData.id}`);
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞, –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç)
        try {
            let textParts = [];

            // –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ (review-plus)
            try {
                const plusElement = await reviewContainer.findElement(By.css('.review-plus'));
                const plusText = await plusElement.getText();
                if (plusText) {
                    textParts.push(cleanText(plusText));
                }
            } catch (e) {
                // –î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
            }

            // –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ (review-minus)
            try {
                const minusElement = await reviewContainer.findElement(By.css('.review-minus'));
                const minusText = await minusElement.getText();
                if (minusText) {
                    textParts.push(cleanText(minusText));
                }
            } catch (e) {
                // –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
            }

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ (review-body description)
            try {
                const bodyElement = await reviewContainer.findElement(By.css('.review-body.description[itemprop="description"]'));
                const bodyText = await bodyElement.getText();
                if (bodyText) {
                    textParts.push(cleanText(bodyText));
                }
            } catch (e) {
                // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
            }

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
            review.text = textParts.length > 0 ? textParts.join('\n\n') : null;

        } catch (e) {
            console.warn(`   ‚ö†Ô∏è  –¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ID ${reviewData.id}`);
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        try {
            const ratingElement = await reviewContainer.findElement(By.css('meta[itemprop="ratingValue"]'));
            const ratingValue = await ratingElement.getAttribute('content');
            review.rating = ratingValue;
        } catch (e) {
            // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ span –≤ rating-score
            try {
                const ratingSpan = await reviewContainer.findElement(By.css('.rating-score span'));
                const ratingText = await ratingSpan.getText();
                review.rating = ratingText;
            } catch (e2) {
                console.warn(`   ‚ö†Ô∏è  –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${reviewData.id}`);
            }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            const locationElement = await reviewContainer.findElement(By.css('.user-location'));
            const locationText = await locationElement.getText();
            review.city = extractCity(locationText);
        } catch (e) {
            console.warn(`   ‚ö†Ô∏è  –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞ ${reviewData.id}`);
        }

        // –°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ - —É –æ—Ç–∑–æ–≤–∏–∫–∞ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ verified/decided, —Å—Ç–∞–≤–∏–º null
        review.status = null;

        // –ü—Ä–æ–¥—É–∫—Ç - –≤ –æ—Ç–∑–æ–≤–∏–∫–µ –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞, —Å—Ç–∞–≤–∏–º null
        review.product = null;

        console.log(`   ‚úÖ –û—Ç–∑—ã–≤ ${reviewData.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
        return review;

    } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–∑—ã–≤–∞ ${reviewData.id}:`, error.message);
        return null;
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function parseDetailedReviews(sourceFilename = 'otzovik_reviews_filtered_2024-2025.json') {
    try {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ Otzovik...');
        console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C (–¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã)');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        const { lastId, existingReviews, filename: existingFile } = await findLastProcessedId();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–∞—Å—Å–∏–≤
        allReviews.push(...existingReviews);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        const allSourceReviews = await loadSourceReviews(sourceFilename);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ ID
        const sourceReviews = filterSourceReviewsFromId(allSourceReviews, lastId);
        
        if (sourceReviews.length === 0) {
            console.log('‚úÖ –í—Å–µ –æ—Ç–∑—ã–≤—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
            return allReviews;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome
        driver = await new Builder()
            .forBrowser('chrome')
            .setChromeOptions(chromeOptions)
            .build();

        console.log('‚úÖ Chrome –¥—Ä–∞–π–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');

        const totalReviews = sourceReviews.length;
        const alreadyProcessed = allReviews.length;
        console.log(`üìä –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${alreadyProcessed} –æ—Ç–∑—ã–≤–æ–≤`);
        console.log(`üìä –û—Å—Ç–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${totalReviews} –æ—Ç–∑—ã–≤–æ–≤`);
        console.log(`üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: ${alreadyProcessed}/${allSourceReviews.length} (${((alreadyProcessed / allSourceReviews.length) * 100).toFixed(1)}%)`);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤
        for (let i = 0; i < sourceReviews.length; i++) {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ graceful shutdown
            if (isShuttingDown) {
                console.log('üõë –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–∑-–∑–∞ shutdown');
                break;
            }

            const reviewData = sourceReviews[i];
            processedCount = alreadyProcessed + i + 1;
            const currentInBatch = i + 1;

            console.log(`\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤ ${currentInBatch}/${totalReviews} | –û–±—â–∏–π: ${processedCount}/${allSourceReviews.length} (ID: ${reviewData.id})`);

            try {
                const detailedReview = await parseDetailedReview(driver, reviewData);

                if (detailedReview) {
                    allReviews.push(detailedReview);
                    console.log(`   üìä –£—Å–ø–µ—à–Ω–æ: ${allReviews.length} | –í –±–∞—Ç—á–µ: ${currentInBatch}/${totalReviews}`);
                } else {
                    console.log(`   ‚ö†Ô∏è  –û—Ç–∑—ã–≤ ${reviewData.id} –ø—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫`);
                }

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 50 –æ—Ç–∑—ã–≤–æ–≤
                if (processedCount % 50 === 0) {
                    console.log(`\nüíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${processedCount} –æ—Ç–∑—ã–≤–æ–≤...`);
                    await saveReviewsToFile(allReviews, `otzovik_detailed_reviews_${processedCount}.json`);
                }

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
                await driver.sleep(500);

            } catch (error) {
                console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∑—ã–≤–∞ ${reviewData.id}:`, error.message);
                continue; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–∑—ã–≤–∞
            }
        }

        if (!isShuttingDown) {
            console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!');
            console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${allReviews.length}`);
            console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: ${processedCount}`);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await saveReviewsToFile(allReviews);
        }

        return allReviews;

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:', error.message);
        throw error;
    } finally {
        if (driver && !isShuttingDown) {
            console.log('üîö –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
            await driver.quit();
            driver = null;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞
if (require.main === module) {
    parseDetailedReviews()
        .then(reviews => {
            if (!isShuttingDown) {
                console.log('‚úÖ –ü–∞—Ä—Å–µ—Ä –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
                console.log(`üìà –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${reviews.length} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤`);
            }
        })
        .catch(error => {
            if (!isShuttingDown) {
                console.error('üí• –ü–∞—Ä—Å–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error.message);
                process.exit(1);
            }
        });
}

module.exports = { parseDetailedReviews };